{"version":3,"sources":["services/persons.js","App.js","reportWebVitals.js","index.js"],"names":["baseUrl","axios","get","newObject","post","id","put","delete","Filter","props","value","search","onChange","handleSearchChange","Personform","onSubmit","addSomething","newName","handleNameChange","newPhone","handlePhoneChange","type","Persons","personsToShow","map","person","removePerson","name","Person","number","onClick","Notification","message","className","Error","error","App","useState","persons","setPersons","setNewName","setNewPhone","setSearch","notification","setNotification","setError","React","useEffect","personsService","then","response","console","log","data","filter","toLowerCase","includes","event","target","preventDefault","foundPerson","find","window","confirm","setTimeout","catch","e","p","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2815bc7d.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n  return axios.get(baseUrl)\r\n}\r\n \r\nconst create = newObject => {\r\n  return axios.post(baseUrl, newObject)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  return axios.put(`${baseUrl}/${id}`, newObject)\r\n}\r\n\r\nconst remove = (id) => {\r\n  return axios.delete(`${baseUrl}/${id}`)\r\n}\r\n\r\nexport default { \r\n  getAll: getAll, \r\n  create: create, \r\n  update: update,\r\n  remove: remove,\r\n}","import React, { useState } from 'react'\nimport personsService from './services/persons'\nimport './App.css'\n\n\n\nconst Filter = (props) => {\n  return (\n    <div>\n      filter shown with \n      <input value={props.search} onChange={props.handleSearchChange}/>\n    </div>\n  )\n}\n\nconst Personform = (props) => {\n  return (\n    <form onSubmit={props.addSomething}>\n        <div>\n          name: <input value={props.newName} onChange={props.handleNameChange} />\n        </div>\n        <div>number: <input value={props.newPhone} onChange={props.handlePhoneChange}/></div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n    </form>\n  )\n}\n\nconst Persons = (props) => {\n  return(\n    <div>\n      {props.personsToShow.map(person => \n        <Person key={person.name} person={person} removePerson={props.removePerson}/>)}\n    </div>\n  )\n}\n\nconst Person = (props) => {\n  return (\n    <>\n      <li>{props.person.name}{' '}{props.person.number}{' '}\n      <button onClick={() => props.removePerson(props.person)}>delete</button></li>\n      \n    </>\n  )\n}\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"notification\">\n      {message}\n    </div>\n  )\n}\n\nconst Error = ({ error }) => {\n  if (error === null) {\n    return null\n  }\n\n  return (\n    <div className=\"error\">\n      {error}\n    </div>\n  )\n}\n\nconst App = () => {\n  const [persons, setPersons] = useState([]) \n\n  const [newName, setNewName] = useState('')\n\n  const [newPhone, setNewPhone] = useState('')\n\n  const [search, setSearch] = useState('')\n\n  const [notification, setNotification] = useState(null)\n\n  const [error, setError] = useState(null)\n\n  React.useEffect(() => {\n    const promise = personsService.getAll()\n    promise.then(response => {\n      console.log(response)\n      setPersons(response.data)\n    })\n  }, []);\n\n\n  const personsToShow = persons.filter(person => person.name.toLowerCase().includes(search.toLowerCase()))\n\n  const removePerson = (person) => {\n    const msg = window.confirm(`Delete ${person.name}`)\n    if(msg===true){\n      return personsService\n        .remove(person.id)\n        .then(() => setPersons(persons.filter((p) => p.id != person.id)))\n        .catch((e) => {\n          setError(e.response.data.error)\n          setTimeout(() => setError(null), 5000)\n        })\n    }\n    \n  }\n\n\n  const addSomething = (event) => {\n    event.preventDefault()\n    console.log('button clicked', event.target)\n    const foundPerson = persons.find(person => person.name === newName);\n    if (foundPerson) {\n      const msg2 = window.confirm(`${foundPerson.name} is already added to the phonebook, replace it with a new phone number?`)\n      if(msg2===true){\n        return personsService\n          .update(foundPerson.id, {...foundPerson, number: newPhone})\n          .then((response) => {\n            setPersons(persons.map(person => {\n              if (person.id == foundPerson.id) {\n                return response.data\n              } else {\n                return person\n              }\n            }))\n            setNotification(`${foundPerson.name} has been updated`)\n            setTimeout(() => setNotification(null), 5000)\n          })\n          .catch((e) => {\n            setError(e.response.data.error)\n            setTimeout(() => setError(null), 5000)\n          })\n      }\n    } else {\n      const person = {name: newName, number: newPhone}\n      \n      const promise = personsService.create(person)\n      promise.then(response => {\n        console.log(response)\n        setPersons([...persons, response.data])\n        setNotification(`Added ${person.name}`)\n        setTimeout(() => setNotification(null), 5000)\n      })\n      .catch((e) => {\n        console.log(e)\n        setError(e.response.data.error)\n        setTimeout(() => setError(null), 5000)\n      })\n    }\n  }\n\n  const handlePhoneChange = (event) => {\n    setNewPhone(event.target.value)\n  }\n\n  const handleNameChange = (event) => {\n    console.log(event.target.value) \n    setNewName(event.target.value)\n  }\n\n  const handleSearchChange =(event) => {\n    setSearch(event.target.value)\n  }\n\n  return (\n    <div>\n      <Notification message={notification} />\n      <Error error={error}/>\n      <h2>Phonebook</h2>\n      <Filter search={search} handleSearchChange={handleSearchChange}/>\n      <Personform \n        addSomething={addSomething}\n        newName={newName}\n        handleNameChange={handleNameChange}\n        newPhone={newPhone}\n        handlePhoneChange={handlePhoneChange}   \n      />\n      <h2>Numbers</h2>\n      <Persons personsToShow={personsToShow} removePerson={removePerson}/> \n    </div>\n  )\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}